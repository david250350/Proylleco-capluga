@model IEnumerable<Capluga.Entities.ProductoEnt>

@{
    ViewBag.Title = "Productos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="col-12 grid-margin stretch-card">
    <div class="card">
    </div>

    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Información de Productos</h2>
            <div style="text-align:center">
                <form action="@Url.Action("ProductoPDF", "Document")" method="post">
                    <button type="submit" class="btn btn-success">Descargar PDF</button>
                </form>
            </div>
            <div class="container">
                @if (Model.Any())
                {
                    <table id="DataTable" class="table table-bordered table-hover">
                        <thead class="thead-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripcion</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                                <th>Imagen</th>
                                <th>Estado</th>
                                <th>Cambiar Estado</th>
                                <th>Actualizar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Description</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.Price.ToString("C", new System.Globalization.CultureInfo("es-CR"))</td>
                                    <td>
                                        <img src="@item.Image" style="width:125px; height:125px; border-radius:0px;">
                                    </td>
                                    <td>@(item.State ? "Activo" : "Inactivo")</td>
                                    <td style="text-align:center">
                                        <a onclick="confirmStateChange('@Url.Action("ActualizarEstadoProducto", "Producto", new { q = item.MedicalImplementsID })')">
                                            <i class="fa fa-refresh fa-lg"></i>
                                        </a>
                                    </td>
                                    <td style="text-align:center">
                                        <a href="@Url.Action("ActualizarProducto", "Producto", new { q = item.MedicalImplementsID })"><i class="fa fa-edit fa-lg"></i>&nbsp;&nbsp;</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="col-12 alert alert-info" role="alert" style="text-align: center; margin-top: 5%;">
                        No hay productos en este momento.
                    </div>
                }
                <div class="card-body">
                    <h2 class="card-title">Precios de Productos y Valor total</h2>
                    <canvas id="priceChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<script>
    window.onload = function() {
        var productos = @Html.Raw(Json.Encode(Model.Select(p => new { p.Name, p.Price, p.Quantity })));
        console.log("Productos:", productos);

        if (productos.length > 0) {
            var ctx = document.getElementById('priceChart').getContext('2d');
            if (!ctx) {
                console.error("No se pudo obtener el contexto del canvas.");
                return;
            }

            var colores = generarColoresDiferentes(productos.length);

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: productos.map(p => p.Name),
                    datasets: [{
                        label: 'Precio',
                        data: productos.map(p => p.Price),
                        backgroundColor: colores,
                        borderColor: colores.map(c => darkenColor(c, 0.2)),
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0,0,0,0.7)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: 'rgba(0,0,0,0.1)',
                            borderWidth: 1
                        },
                        datalabels: {
                            anchor: 'end',
                            align: 'center',
                            formatter: function (value, context) {
                                var total = productos[context.dataIndex].Quantity * value;
                                return total.toLocaleString('es-CR', { style: 'currency', currency: 'CRC' });
                            },
                            color: '#000',
                            font: {
                                weight: 'bold',
                                size: 12
                            },
                            offset: -10,
                            rotation: 0
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });
        } else {
            console.warn("No se encontraron productos para mostrar en el dashboard.");
        }
    };

    function generarColoresDiferentes(num) {
        var colores = [];
        for (var i = 0; i < num; i++) {
            colores.push('hsl(' + (i * 360 / num) + ', 70%, 50%)');
        }
        return colores;
    }

    function darkenColor(color, percent) {
        var f = color.split(","),
            t = percent < 0 ? 0 : 255,
            p = percent < 0 ? percent * -1 : percent,
            R = parseInt(f[0].slice(4)),
            G = parseInt(f[1]),
            B = parseInt(f[2]);
        return "rgb(" + (Math.round((t - R) * p) + R) + "," + (Math.round((t - G) * p) + G) + "," + (Math.round((t - B) * p) + B) + ")";
    }
</script>
